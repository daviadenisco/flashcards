const QA = [
    {
        id: 1,
        question: 'Describe the event loop.',
        answer: 'The event loop is a constantly running process that checks if the call stack is empty. Imagine it like a clock and every time it ticks it looks at the Call Stack and if it is empty it looks into the Event Queue. If there is something in the event queue that is waiting it is moved to the call stack. If not, then nothing happens.',
        eval: null,
        pass: 0,
    },
    {
        id: 2,
        question: 'What is the call stack?',
        answer: 'JS has a single call stack in which it keeps track of what function is currently being executed, and what function is to be executed after that. It is an array-like data structure with some limitations, you can add items only to the back, and remove only the last item. Like a pile of plates, stack plate on top of plate but can remove only the top one.',
        eval: null,
        pass: 0,
    }, 
    {   
        id: 3,
        question: 'What is a closure?',
        answer: 'A function contained within a function. It is when the inner function has access to the scope of the enclosing/outer function. To use a closure, define a function inside another function and expose it by returning it or passing it to another function.',
        eval: null,
        pass: 0,
    },
    {
        id: 4,
        question: 'What goes in constructor(props)?',
        answer: 'The first thing is super(props) before any statement, initialize state by using this.state, bind event handlers to the class instance, if state is not used and you don’t bind methods, you don’t need to implement the constructor.',
        eval: null,
        pass: 0,
    },
    {
        id: 5,
        question: 'What goes into the componentDidMount( )?',
        answer: 'This is evoked immediately after a component is mounted (inserted into the DOM tree). Initialization that requires DOM nodes should go here. A "node", in this context, is simply an HTML element. The "DOM" is a tree structure that represents the HTML of the website, and every HTML element is a "node". ',
        eval: null,
        pass: 0,
    },
    {
        id: 6,
        question: 'What is the hooks quivalent of componentDidMount( )?',
        answer: 'useEffect(() => { action && update });',
        eval: null,
        pass: 0,
    },
    {
        id: 7,
        question: 'What goes into render( )?',
        answer: 'Required method, looks at this.props and this.state and returns one of the following: React elements, strings and numbers, portals, null, or booleans. This method should be pure and should NOT modify component state. It should return the same result each time it is invoked and does not directly interact with the browser',
        eval: null,
        pass: 0,
    },
    {
        id: 8,
        question: 'What is AJAX',
        answer: 'Asynchronous JavaScript and XML is the method of exchanging data with a server and updating parts of a web page without reloading the entire page.',
        eval: null,
        pass: 0,
    },
    {
        id: 9,
        question: 'What is Axios?',
        answer: 'A library that is meant to help make HTTP requests more easily, using Promises, and more consistently, providing the same API on node.js and in the browser. It facilitates the way to build AJAX-based applications.',
        eval: null,
        pass: 0,
    },  
    {
        id: 10,
        question: 'What is the difference between XML and HTML?',
        answer: 'XML is abbreviation for eXtensible Markup Language whereas HTML stands for Hypertext Markup Language. XML mainly focuses on transfer of data while HTML is focused on presentation of the data.',
        eval: null,
        pass: 0,
    },
    {
        id: 11,
        question: 'What are side effects?',
        answer: 'Any application state change that is observable outside the called function other than its return value. Some examples would be modifying any external variable or object property, like a global variable, or a variable in the parent function scope chain. Any effect other than the return value - anything that manipulates something outside of the scope of the function.',
        eval: null,
        pass: 0,
    },   
    {
        id: 12,
        question: 'What is jQuery?',
        answer: 'A free, open-source software wrapper around JavaScript. It is a JavaScript object library.',
        eval: null,
        pass: 0,
    },
    {
        id: 13,
        question: 'What is state?',
        answer: 'State is the internal data store (object) of a component. State is not immutable, props are immutable. Props are the data being passed to the child component from the parent component.',
        eval: null,
        pass: 0,
    },
    {
        id: 14,
        question: 'What is the difference between HTML and HTML5?',
        answer: 'The main difference is that video and audio are not part of HTML while they are integral parts of HTML5 specifications.',
        eval: null,
        pass: 0,
    },    
    {
        id: 15,
        question: 'Describe multidimentional arrays.',
        answer: 'A two dimensional array is an array that contains one or more other arrays. A three dimensional array is an array that contains one or more arrays that also contain an array',
        eval: null,
        pass: 0,
    },  
    {
        id: 16,
        question: 'What is JSX?',
        answer: 'JSX allows us to write HTML-like syntax, which gets transformed into lightweight JS objects.',
        eval: null,
        pass: 0,
    },
    {
        id: 17,
        question: 'What is onClick?',
        answer: 'Something should happen upon a click.',
        eval: null,
        pass: 0,
    },  
    {
        id: 18,
        question: 'What is onSubmit?',
        answer: 'Information should be collected upon submitting info.',   
        eval: null,
        pass: 0,
    },  
    {
        id: 19,
        question: 'What is onChange?',
        answer: 'Used to detect changes, like when typing into an input field',
        eval: null,
        pass: 0,
    },  
    {
        id: 20,
        question: 'What is the difference between microservices and monolithic architecture?',
        answer: 'A monolithic architecture is built as one large system and is usually one code-base. ... A microservices architecture however is where an app is built as a suite of small services, each with their own code-base. These services are built around specific capabilities and are usually independently deployable.',
        eval: null,
        pass: 0,
    },  
    {
        id: 21,
        question: 'What is srcsetin HTML?',
        answer: 'Defines multiple sizes of the same image, allowing the browser to select the appropriate image source.',
        eval: null,
        pass: 0,
    },  
    {
        id: 22,
        question: 'What is box-sizing in CSS?',
        answer: 'The box-sizing CSS property defines how the user agent should calculate the total width and height of an element. (A user agent is a computer program representing a person, for example, a browser in a web context.)',   
        eval: null,
        pass: 0,
    },  
    {
        id: 23,
        question: 'What is a RESTful API?',
        answer: 'An application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data. REST technology is generally preferred to the more robust Simple Object Access Protocol (SOAP) technology because REST leverages less bandwidth, making it more suitable for internet usage.',
        eval: null,
        pass: 0,
    },  
    {
        id: 24,
        question: 'What is Node.js?',
        answer: 'A runtime environment that lets you execute code outside the browser, which allows us to make SQL queries and other requests.',
        eval: null,
        pass: 0,
    },  
    {
        id: 25,
        question: 'What is the difference between Get and Post?',
        answer: 'Difference between GET and POST method in HTTP. Both GET and POST method are used to transfer data from client to server in HTTP protocol but main difference between POST and GET method is that GET carries request parameter appended in URL string while POST carries request parameter in message body which makes it a more secure way of transferring data from client to server in http protocol.',
        eval: null,
        pass: 0,
    },  
    {
        id: 26,
        question: 'What is the difference in passing params in a Get vs a Post request?',
        answer: 'With a GET request, information is sent to the server via URL parameters. However, with a POST request, additional data is supplied from the client to the server in the message body of the HTTP request. An advantage of the POST over the GET request is that it is more secure - it cannot be bookmarked, is difficult to hack, and is not stored in the browser history. This method is therefore more commonly used when sensitive information is involved.',
        eval: null,
        pass: 0,
    },
    {
        id: 27,
        question: 'Describe async / await.',
        answer: 'First it was callbacks, then promises, then async / await, which is the best of the three because we can pause the execution of functions, which allows us to write asynchronouse code that reads like synchronous code and is concise and clean code with better error handling with try / catch for errors.',
        eval: null,
        pass: 0,
    },    
    {
        id: 28,
        question: 'What are higher order functions?',
        answer: 'Function that can either accept another function as a parameter or one that returns a function as a result. It is one of the most useful patterns in JavaScript and has particular importance in functional programming.(Ex. Filter, Map, Reduce)',
        eval: null,
        pass: 0,
    },    
    {
        id: 29,
        question: 'What happens when you enter a url into the browser?',
        answer: 'The browser uses DNS to find the corresponding IP address of the server you’re ultimately trying to reach; browser connects to the server, and the server handles the request and sends back a response.',
        eval: null,
        pass: 0,
    },    
    {
        id: 30,
        question: 'What are higher order components?',
        answer: 'A funcitontha ttakes a component and returns a new component. A component transforms props into UI, while a higher order component transforms a component into another component.',
        eval: null,
        pass: 0,
    },    
    {
        id: 31,
        question: 'What is React?',
        answer: 'A JavaScript library used for building user interfaces.',
        eval: null,
        pass: 0,
    },    
    {
        id: 32,
        question: 'Name the HTTP verbs.',
        answer: 'GET, POST, PUT, PATCH, and DELETE - these correspond to read, create, update, and delete aka CRUD operations',
        eval: null,
        pass: 0,
    },    
    {
        id: 33,
        question: 'What is the difference between render and ReactDOM.render?',
        answer: 'Render: Describes what the UI will look like for the particular component. ReactDOM.render: Renders a React component to a DOM node.',
        eval: null,
        pass: 0,
    },    
    {
        id: 34,
        question: 'How can you manage state in React?',
        answer: 'All of the above',
        options: ['Redux', 'Context', 'Props', 'Hooks', 'All of the above'],
        eval: null,
        pass: 0,
    },    
    {
        id: 35,
        question: 'Talk about the virtual DOM.',
        answer: 'A JavaScript representation of the actual DOM. Virtual DOM is what differentiates React from JavaScript. (according to an interviewer) Virtual DOM is a virtual representation of the DOM that allows React to render changes only by comparing the Virtual DOM to the actual DOM',  
        eval: null,
        pass: 0,
    },
    {
        id: 36,
        question: 'What are the React lifecycle methods?',
        answer: 'constructor(), render(), componentDidMount(), componentDidUpdate(), componentWillUnmount()',
        eval: null,
        pass: 0,
    },
    {
        id: 37,
        question: 'What is Redux?',
        answer: 'A way to manage state within React.',
        eval: null,
        pass: 0,
    },
    {
        id: 38,
        question: 'Given a string that is not words, it is only numbers, how would you convert that string into a percentage using a built-in method?',
        answer: 'parseInt()',
        eval: null,
        pass: 0,
    },
    {
        id: 39,
        question: 'What is a constructor (this.state)?',
        answer: 'The way in which initial state of a component is established. A constructor is the only place where you should assign this.state directly. In all other methods, you need to use this.setState() instead.',
        eval: null,
        pass: 0,
    },
    {
        id: 40,
        question: 'Describe setState()',
        answer: 'A helper method used for updating the state of a component and re-rendering the UI',
        eval: null,
        pass: 0,
    },
    {
        id: 41,
        question: 'What is the benefit of using propTypes?',
        answer: 'Allows you to control the presence, or types of certain props passed to the child component.',
        eval: null,
        pass: 0,
    },
    {
        id: 42,
        question: 'What does defaultProps do?',
        answer: 'Allows you to set default props for your component.',
        eval: null,
        pass: 0,
    },
    {
        id: 43,
        question: 'How to create scope?',
        answer: 'Create and invoke a function.',
        eval: null,
        pass: 0,
    },
    {
        id: 44,
        question: 'What is an IIFE?',
        answer: 'Immediately invoked function expression',
        eval: null,
        pass: 0,
    },
    {
        id: 45,
        question: 'What is an expression?',
        answer: 'A piece of code that can resolve to a single value.',
        eval: null,
        pass: 0,
    },
    {
        id: 46,
        question: 'What is a data structure?',
        answer: 'In computer science, a data structure is a data organization, management and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, the relationships among them, and the function or operations that can be applied to the data.',
        eval: null,
        pass: 0,
    },
    {
        id: 47,
        question: 'What is z-index?',
        answer: 'The property specifies the stack order of an element. An element with a greater stack order is always in front of an element with a lower stack order. Note: z-index works only on positioned elements (position: absolute, relative or fixed',
        eval: null,
        pass: 0,
    },
    {
        id: 48,
        question: 'What does URL stand for?',
        answer: 'Uniform Resource Locator',
        eval: null,
        pass: 0,
    },
    {
        id: 49,
        question: 'What is a callback?',
        answer: 'A callback function is a function that is passed as an argument to another function. Callback functions are a technique that’s possible in JavaScript because of the fact that functions are objects. Examples include setTimeout(), onClick(), onSubmit(). Node uses callbacks a lot, which makes it highly scalable as it can process a high number of requests without waiting for any function to return results.',
        eval: null,
        pass: 0,
    },
    {
        id: 50,
        question: 'What is postgreSQL?',
        answer: 'The main library used to communicate with our psql database. Without this library, communicaiton with the database will not be possible.',
        eval: null,
        pass: 0,
    },
    {
        id: 51,
        question: 'What is NPM?',
        answer: 'Node Package Manager allows us to install, remove, and update third party libraries (prewritten code).',
        eval: null,
        pass: 0,
    },
    {
        id: 52,
        question: 'What is Express?',
        answer: 'The actual server code that is executed by Node.js. Express code is executed by the node environment.',
        eval: null,
        pass: 0,
    },
    {
        id: 53,
        question: 'What is CORS?',
        answer: 'The library we use to help communication between the React App and the Express server. This is done through a proxy in the React App. Without CORS we would receive a Cross Origin Resource error in the browser.',
        eval: null,
        pass: 0,
    },
    {
        id: 54,
        question: 'What is helmet?',
        answer: 'A security library that updates http headers. This library will make our http requests more secure.',
        eval: null,
        pass: 0,
    },
    {
        id: 55,
        question: 'How does an IIFE work with the event loop? Do they? What happens?',
        answer: 'No idea.',
        eval: null,
        pass: 0,
    },
    {
        id: 56,
        question: 'Describe event bubbling.',
        answer: 'Pass.',
        eval: null,
        pass: 0,
    },
    {
        id: 57,
        question: 'What is currying?',
        answer: 'Seasoning certain foods.',
        eval: null,
        pass: 0,
    },
    {
        id: 58,
        question: 'Why use strict?',
        answer: 'Cannot recall.',
        eval: null,
        pass: 0,
    },
    {
        id: 59,
        question: 'Talk about error boundaries in React.',
        answer: 'Pass.',
        eval: null,
        pass: 0,
    },
    {
        id: 60,
        question: 'What are React portals?',
        answer: 'No idea.',
        eval: null,
        pass: 0,
    },
    {
        id: 61,
        question: 'Can you think of an instance in which you would use setState of null to avoid rendering?',
        answer: 'Yes.',
        eval: null,
        pass: 0,
    },
    {
        id: 62,
        question: 'What makes the server-side rendering of React good?',
        answer: 'No idea.',
        eval: null,
        pass: 0,
    },
    {
        id: 63,
        question: 'Describe the declarative nature of React.',
        answer: 'Pass.',
        eval: null,
        pass: 0,
    },
    {
        id: 64,
        question: 'Talk about Big O notation.',
        answer: 'Pass.',
        eval: null,
        pass: 0,
    },
    {
        id: 65,
        question: 'What are the falsey values in JS?',
        answer: 'Cannot recall',
        eval: null,
        pass: 0,
    },
    {
        id: 66,
        question: 'What is prototypical inheritance?',
        answer: 'No idea.',
        eval: null,
        pass: 0,
    },
    {
        id: 67,
        question: 'What is the compile phase?',
        answer: 'No idea.',
        eval: null,
        pass: 0,
    },
    {
        id: 68,
        question: 'What is a SQL query?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 69,
        question: 'What are React elements?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 70,
        question: 'When is super() used?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 71,
        question: 'List all the joins in SQL.',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 72,
        question: 'What are container components?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 73,
        question: 'What are class components?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 74,
        question: 'What are functional components?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 75,
        question: 'What is RESTful architecture?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 76,
        question: 'When should you use destructuring?',
        answer: '?',
        eval: null,
        pass: 0,
    },
    {
        id: 77,
        question: 'What are dev dependencies?',
        answer: 'Stuff you do not need to run the app. --save dev vs Stuff you need to run the app, aka dependencies. --save',
        eval: null,
        pass: 0,
    }, 
    {
        id: 78,
        question: 'You have a div on a page with an onClick(), inside the div is a button with a separate onClick(). How can you make one take precedence?',
        answer: 'preventDefault()',
        eval: null,
        pass: 0,
    }, 
    {
        id: 79,
        question: 'What is Safari?',
        answer: 'Search engine by Apple',
        eval: null,
        pass: 0,
    }, 
    {
        id: 80,
        question: 'Is Chrome performance heavy?',
        answer: 'Yes, it takes up a lot of space and is very performance heavy.',
        eval: null,
        pass: 0,
    },
    {
        id: 81,
        question: 'What is Firefox?',
        answer: 'Browser owned by Mozilla',
        eval: null,
        pass: 0,
    },
    {
        id: 82,
        question: 'How can you view all shortcuts in VS Code?',
        answer: 'shift + command + P',
        eval: null,
        pass: 0,
    },
    {
        id: 83,
        question: '',
        answer: '',
        eval: null,
        pass: 0,
    },
    {
        id: 84,
        question: '',
        answer: '',
        eval: null,
        pass: 0,
    },
    {
        id: 85,
        question: 'Does JavaScript pass parameters by value or by reference?',
        answer: 'JavaScript Primitives are passed by value, because they have no properties. In JavaScript there are 5 primitive types: undefined, null, boolean, string and number. Arrays and Objects are passed by reference or by value based on these conditions: if you are setting the value of an object or array it is Pass by Value. object1 = {prop: "car"}; array1 = [1,2,3]; if you are changing a property value of an object or array then it is Pass by Reference.',
        eval: null,
        pass: 0,
    },
    {
        id: 86,
        question: 'What are the benefits of AJAX?',
        answer: 'Callbacks (makes a call to the server to retrieve and/or save data without posting the entire page back to the server in order to minimize the use of the network. This helps to improve performance, especially in areas with restricted bandwidth. By using callbacks, the server is not required to process all form elements. By sending only necessary data, there is limited processing on the server), making asynchronous calls (asynchronous calls to a web server allows the client browser to avoid waiting for all data to arrive before allowing the user to act once more), user-friendly (apps are more responsive and faster), and increased speed (not having to re-render the whole page).',
        eval: null,
        pass: 0,
    },
    {
        id: 87,
        question: 'What is hoisting?',
        answer: 'This is a scope thing. JavaScript scans the whole piece of code / page first, and creates a table that lists all variable and what their values are. When a function and variable declarations are added to memory during the compile phase. Hoisting is usually defined as “declarations being moved to top of your code” because that’s what seems to be happening but the code doesn’t actually physically move to the top of the file. Behind the scenes, the function and variable declarations are added to memory during the compile phase. Because of hoisting, it’s considered a best practice to always declare your variables at the top of their respective scopes. This way there are no undesirable effects. You should also always try to initialize variables when you declare them. This will provide cleaner code and help avoid ```undefined``` variables.',
        eval: null,
        pass: 0,
    },
    {
        id: 88,
        question: 'What is debouncing?',
        answer: 'Debouncing: Consider the same cake example. This time you kept on asking your mom for the cake so many times that she got annoyed and told you that she will give you the cake only if you remain silent for one hour. This means you won’t get the cake if you keep on asking her continuously - you will only get it one hour after last time you ask, once you stop asking for the cake. This is debouncing. In the debouncing technique, no matter how many times the user fires the event, the attached function will be executed only after the specified time once the user stops firing the event. For instance, suppose a user is clicking a button 5 times in 100 milliseconds. Debouncing will not let any of these clicks execute the attached function. Once the user has stopped clicking, if debouncing time is 100 milliseconds, the attached function will be executed after 100 milliseconds. Thus, to a naked eye, debouncing behaves like grouping multiple events into one single event.',
        eval: null,
        pass: 0,
    },
    {
        id: 89,
        question: 'What is the difference between px, rem and ems?',
        answer: 'Pixel (px) is a commonly used CSS unit on websites. Px is not responsive, it is an absolute unit. Change in the value of another element does not affect the value of absolute units. Element (em) and Root element (rem) are responsive units interpreted into equivalent pxunit by the browser. They are relative units. Change in the value of the parent or root element affects the value of relative units. They scale with the device. So, what makes the two different? The difference lies in how the values are derived by the browser. To view the computed values, open the Chrome Developer Tools and navigate to the Computed tab. The computed pixel value of emunit is relative to the font size of the element being styled. This is also affected by inherited values from the parent elements unless it is explicitly overridden by a pxunit which is not subject to inheritance. The computed pixel value of remunit is relative to the font size of the root (html) element. This is however affected by the font size setting on the browser as a result of inheritance unless it is overridden by a pxunit which is not subject to inheritance.',
        eval: null,
        pass: 0,
    },
    {
        id: 90,
        question: 'What is throttling?',
        answer: 'Imagine a toddler who loves to eat cake! A cake was made today but it is not for you, it is for the guests! The toddler keeps on asking for the cake. Finally, someone gives you some cake. But, you keep on asking for more, annoying everyone around you and they give you more cake with a condition that you can have the cake only after an hour. Still, you keep on asking for the cake, but now you are ignored. Finally, after an interval of one hour, you get more cake. If you ask for more, you will get it only after an hour, no matter how many times you ask. This is what throttling is! Throttling is a technique in which, no matter how many times the user fires the event, the attached function will be executed only once in a given time interval. For instance, when a user clicks on a button, a helloWorld function is executed which prints Hello World on the console. Now, when throttling is applied with 1000 milliseconds to this helloWorld function, no matter how many times the user clicks on the button, Hello World will be printed only once in 1000 milliseconds. Throttling ensures that the function executes at a regular interval.',
        eval: null,
        pass: 0,
    },
];

export default QA;